apply plugin: 'com.android.application'

RES_PATH = RES_PATH.replace("\\", "/")
COCOS_ENGINE_PATH = COCOS_ENGINE_PATH.replace("\\", "/")

buildDir = "${RES_PATH}/proj/build/$project.name"
android {
    compileSdkVersion PROP_COMPILE_SDK_VERSION.toInteger()
    buildToolsVersion PROP_BUILD_TOOLS_VERSION
    ndkPath PROP_NDK_PATH

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId APPLICATION_ID
        minSdkVersion PROP_MIN_SDK_VERSION
        targetSdkVersion PROP_TARGET_SDK_VERSION

        buildConfigField "String", "OPPO_APP_ID", OPPO_APP_ID
        buildConfigField "String", "OPPO_APP_SECRET", OPPO_APP_SECRET

        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        externalNativeBuild {
            cmake {
                targets "cocos"
                arguments "-DRES_DIR=${RES_PATH}", "-DCOCOS_X_PATH=${COCOS_ENGINE_PATH}", "-DANDROID_STL=c++_static", "-DANDROID_TOOLCHAIN=clang", "-DANDROID_ARM_NEON=TRUE", "-DANDROID_LD=gold"
                cppFlags "-frtti -fexceptions -fsigned-char"
            }
            ndk { abiFilters PROP_APP_ABI.split(':') }
        }
    }

    dexOptions {
        preDexLibraries = false
    }

    sourceSets.main {
        java.srcDirs "../src", "src"
        res.srcDirs "../res", 'res'
        jniLibs.srcDirs "../libs", 'libs'
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "${RES_PATH}/data"
        jniLibs {
            // Vulkan validation layer
            // srcDir "${android.ndkDirectory}/sources/third_party/vulkan/src/build-android/jniLibs"
        }
    }

    externalNativeBuild {
        cmake {
            path "../CMakeLists.txt"
            buildStagingDirectory "${RES_PATH}/proj/build"
        }
    }

    signingConfigs {

        release {
            if (project.hasProperty("RELEASE_STORE_FILE") && !RELEASE_STORE_FILE.isEmpty()) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {

        release {
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
            multiDexKeepProguard file('maindexlist.pro')
            // resValue  "string", "app_name", PROP_APP_NAME
        }

        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            // resValue  "string", "app_name", "${PROP_APP_NAME}-dbg"
            // applicationIdSuffix ".debug"
        }
    }

    applicationVariants.all {
        def channel = CHANNEL
        //判断是release还是debug版本
        def buildType = it.buildType.name
        def fileName
        def appName = "${PROP_APP_NAME}"
        def outputFile
        def createTime = new Date().format("YYMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
        it.outputs.each {
            outputFile = it.outputFile
            fileName = "${channel}-${appName}-${createTime}${buildType}v${defaultConfig.versionName}.apk"
            //将名字打印出来，以便及时查看是否满意。
            println "文件名：-----------------${fileName}"
            //重新对apk命名。(适用于Gradle4.0以下版本)
//            it.outputFile = new File(outputFile.parent, fileName)
            //重新对apk命名。(适用于Gradle4.0（含）以上版本)如果你Gradle版本是4.x则将上面的一行代码注释，解开注释下面的这一行。
            it.outputFileName = fileName
        }
    }
}

repositories {
    flatDir {
        dirs 'libs'   // aar目录
    }
}

dependencies {
    implementation fileTree(dir: '../libs', include: ['*.jar', '*.aar'])
    implementation fileTree(dir: "${COCOS_ENGINE_PATH}/cocos/platform/android/java/libs", include: ['*.jar'])
    implementation project(':libservice')
    implementation project(':libcocos')
    implementation project(':libandroid')

    implementation files("libs/gamesdk-20220915.aar") // Oppo 游戏SDK
    implementation files("libs/gamesdk-common-20220915.aar") // Oppo 游戏SDK
//    implementation files("libs/core-1.1.0.aar") // Oppo 游戏SDK
//    // Oppo 广告SDK 要求 - 开头
    implementation files("libs/mobad_normal_pub_490000_2022_11_16.aar")
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'com.squareup.okio:okio:2.5.0'

    implementation 'org.jetbrains.kotlin:kotlin-android-extensions-runtime:1.3.72'
    implementation 'android.arch.persistence:db-framework:1.1.1'//410版本新增
    implementation 'androidx.palette:palette:1.0.0'//490版本新增

    //由于可能与接入业务产生冲突，故由开发者决定依赖的版本，wechat sdk区分wechat-sdk-android与wechat-sdk-android-without-mta,由开发者决定依赖版本
    implementation "com.tencent.mm.opensdk:wechat-sdk-android-without-mta:5.5.8"//注意480版本新增，可以提升广告效果
//    // Oppo 广告SDK 要求 - 结尾
}
