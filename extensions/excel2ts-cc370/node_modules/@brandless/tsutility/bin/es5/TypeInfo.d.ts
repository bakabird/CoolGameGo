import { PropertyInfo } from "./PropertyInfo";
import { MethodInfo } from "./MethodInfo";
import { TypeContainer } from "./TypeContainer";
export declare class TypeInfo {
    constructor();
    static __last: any;
    static IsDefined(type: any, attribute: string, inherit: boolean): boolean;
    static SetPrototypeOf(O: any, proto: any): any;
    static BaseType(type: any): any;
    static NameOf(type: any): string;
    static GetNameOf(type: any): any;
    static IsArray(obj: any): boolean;
    static IsClass(type: any): boolean;
    static IsAssignableFrom(to: any, from: any): boolean;
    static GetIsAssignableFrom(to: any, from: any): boolean;
    static GetType(input: any): TypeContainer;
    static ReferToSameType(leftType: any, rightType: any): boolean;
    static GetProperty(type: any, name: string): PropertyInfo;
    private static __resolvedPropertiesKey;
    static GetRuntimeProperties(type: any): Array<PropertyInfo>;
    static GetObjectProperties(obj: any): Array<PropertyInfo>;
    static GetProperties(type: any): Array<PropertyInfo>;
    static GetMethod(type: any, name: string): MethodInfo;
    static GetMethods(type: any): Array<MethodInfo>;
    static _propertyMap: Map<any, Map<string, PropertyInfo>>;
    static GetRuntimeProperty(type: Function | TypeContainer, name: string): PropertyInfo;
    static GetRuntimeMethod(type: any, name: string): MethodInfo;
    static GetRuntimeMethods(type: any): Array<MethodInfo>;
}
