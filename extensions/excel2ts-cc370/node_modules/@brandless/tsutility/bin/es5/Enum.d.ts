import { Collection } from "./Collection";
export declare class EnumValue<T> {
    Name: string;
    Value: number;
    EnumType: Enum<T>;
    constructor(Name: string, Value: number, EnumType: Enum<T>);
}
export declare class EnumValueCollection<T> extends Collection<EnumValue<T>> {
    EnumType: Enum<T>;
    constructor(EnumType: Enum<T>);
    toString(): string;
}
export declare class Enum<T> extends Function {
    Values: any;
    private static _EnumMap;
    private _Entries;
    get Entries(): Array<EnumValue<T>>;
    constructor(Values: any);
    static Get<T>(values: any): Enum<any>;
    ResolveEntries(): Array<EnumValue<T>>;
    static ResolveEnumEntries(enumType: any): EnumValueCollection<any>;
    get IsEnum(): boolean;
    ConvertToString(value: T): string;
    static ConvertToString<T extends number | EnumValue<any> | Array<EnumValue<any> | number>>(enumType: any, value: T): string;
    ConvertFromString(value: string): T;
    TryConvertFromString(value: string): T;
    static GetName<T>(type: any, value: T): string;
    static Parse(type: any, value: string): any;
    static SetHasFlags(enumType: any): void;
    get HasFlags(): boolean;
    static HasFlags(enumType: any): boolean;
    HasFlag(values: number, flag: number): boolean;
    static HasFlag(values: number, flag: number): boolean;
    static SetFlag(values: number, flag: number): number;
    static RemoveFlag(values: number, flag: number): number;
    GetEntries(value: T): EnumValueCollection<any>;
    static ToObject(enumType: any, value: any): EnumValueCollection<any>;
    static Flatten<T extends number | EnumValue<any> | Array<EnumValue<any> | number> | EnumValueCollection<any>>(enumType: any, value: T): EnumValueCollection<any>;
    private static FlattenInternal;
    static GetEntries(enumType: any, value: number): EnumValueCollection<any>;
}
