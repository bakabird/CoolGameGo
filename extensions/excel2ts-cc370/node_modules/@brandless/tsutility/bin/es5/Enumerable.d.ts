declare type IndexableType<T> = {
    [index: number]: T;
    length: number;
};
export declare class Enumerable {
    Count<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): number;
    IndexOf<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, entity: T): number;
    ToList<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): T[];
    Any<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): boolean;
    All<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): boolean;
    Where<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): T[];
    Single<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    Skip<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, amount: number): T[];
    Take<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, amount: number): T[];
    Select<T, TProperty>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => TProperty): Array<TProperty>;
    SelectMany<TSource, TResult>(array: Array<TSource>, selector?: (entity: TSource) => Array<TResult>): Array<TResult>;
    Distinct<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): T[];
    OrderBy<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, orderFunc: (entity: T) => any): T[];
    OrderByDescending<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, orderFunc: (entity: T) => any): T[];
    static ToList<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): Array<T>;
    static OrderBy<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, orderFunc: (entity: T) => any): T[];
    static OrderByDescending<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, orderFunc: (entity: T) => any): T[];
    static IndexOf<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, entity: T): number;
    static Distinct<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): T[];
    static Remove<T>(array: Array<T>, entity: T): boolean;
    static Count<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): number;
    static Sum<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => number): number;
    static Select<T, TProperty>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => TProperty): Array<TProperty>;
    static SelectMany<TSource, TResult>(array: Array<TSource>, selector?: (entity: TSource) => Array<TResult>): Array<TResult>;
    static Single<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static SingleOrDefault<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static Skip<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, amount: number): T[];
    static Take<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, amount: number): T[];
    static First<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static FirstOrDefault<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static Last<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static LastOrDefault<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T;
    static IfWhere<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): T[];
    static EnsureIterable<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): T[];
    static GetLength<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): number;
    static Where<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): T[];
    static Cast<T>(array: Array<any>): T[];
    static Any<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter?: (entity: T) => boolean): boolean;
    static All<T>(array: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, filter: (entity: T) => boolean): boolean;
    static Contains<T>(array: Array<T>, entity: T): boolean;
    static TypeContains<T>(array: Array<T>, entity: T): boolean;
    static Concat<T>(array1: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>, array2: Array<T> | IndexableType<T> | Map<any, any> | IterableIterator<T>): T[];
}
export {};
