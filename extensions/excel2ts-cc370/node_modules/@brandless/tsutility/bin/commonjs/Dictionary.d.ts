import { KeyValuePair } from "./KeyValuePair";
import { Collection } from "./Collection";
export declare class TryGetValueResult<TValue> {
    Value: TValue;
}
export declare class DictionaryItem<TKey, TValue> extends KeyValuePair<TKey, TValue> {
    Index: number;
    LookupKey: string;
    Deleted: boolean;
    constructor(key: TKey, value: TValue, Index: number, LookupKey: string);
}
export declare class Dictionary<TKey, TValue> extends Collection<DictionaryItem<TKey, TValue>> {
    _internal: any;
    _internalByIndex: any;
    _key: string;
    static _count: number;
    constructor();
    private _keys;
    Keys(): Array<TKey>;
    private _values;
    Values(): Array<TValue>;
    Clear(): void;
    ContainsKey(key: TKey): boolean;
    TryGetValue(key: TKey, result: (value: TValue) => void): boolean;
    TryGetValue2(key: TKey, result: TryGetValueResult<TValue>): boolean;
    Get(key: TKey): TValue;
    private GetItem;
    Set(key: TKey, value: TValue): void;
    Remove(key: TKey): boolean;
    private RemoveItem;
}
