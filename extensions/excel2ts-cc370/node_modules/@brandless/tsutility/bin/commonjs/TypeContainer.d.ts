import { Interface } from "./Interface";
import { TypeMetadata } from "./TypeMetadata";
declare type TypeContainerArg = TypeContainer | Interface<any> | Function;
declare type TypeContainerArgument = TypeContainerArg | Array<TypeContainerArg>;
export declare class TypeContainer {
    isGeneric: boolean;
    get IsEnum(): boolean;
    get IsArray(): boolean;
    get ClassName(): string;
    set ClassName(value: string);
    private static _lookup;
    private _genericTypes;
    get genericTypes(): TypeContainer[];
    get genericTypeParameters(): TypeMetadata[];
    nameOverride: any;
    private _type;
    get type(): Function | Interface<any>;
    private _uniqueName;
    get uniqueName(): string;
    get fullUniqueName(): string;
    get fullName(): string;
    get fullRawName(): string;
    constructor(type: Function | Interface<any>, ...genericTypeContainers: TypeContainer[]);
    MakeGenericType(...genericTypes: Array<TypeContainerArgument>): TypeContainer;
    static GetUniqueName(type: Function | Interface<any> | TypeContainer | {
        [s: number]: string;
    }, ...genericTypeContainers: TypeContainer[]): string;
    static GetUniqueTypeContainerName(type: TypeContainer): string;
    static Get(type: TypeContainerArg | {
        [s: number]: string;
    }, ...genericTypeContainers: Array<TypeContainerArgument>): TypeContainer | null;
}
export {};
