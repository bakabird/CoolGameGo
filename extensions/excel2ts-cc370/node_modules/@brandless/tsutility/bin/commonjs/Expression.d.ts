export declare abstract class Expression {
    protected Func: Function;
    GetValue(context: any): any;
    abstract Compile(): string;
    static Add(left: Expression, right: Expression): Expression;
    static Constant(value: any): Expression;
    static Parameter(type: Function, name: string): ParameterExpression;
    static Assign(left: PropertyExpression, right: Expression): AssignExpression;
    static Property(expression: Expression, propertyName: string): PropertyExpression;
    static Lambda(body: Expression, ...parameterExpressions: ParameterExpression[]): Function;
    private static Compile;
    private static GetLambdaString;
}
export declare class ParameterExpression extends Expression {
    Type: Function;
    Name: string;
    constructor(Type: Function, Name: string);
    Compile(): string;
}
export declare class PropertyExpression extends Expression {
    Expression: Expression;
    PropertyName: string;
    constructor(Expression: Expression, PropertyName: string);
    Compile(): string;
}
export declare abstract class BinaryExpression extends Expression {
    Left: Expression;
    Right: Expression;
    constructor(Left: Expression, Right: Expression);
}
export declare class AssignExpression extends BinaryExpression {
    Left: PropertyExpression;
    Right: Expression;
    constructor(Left: PropertyExpression, Right: Expression);
    Compile(): string;
}
export declare class AddExpression extends BinaryExpression {
    Left: Expression;
    Right: Expression;
    constructor(Left: Expression, Right: Expression);
    Compile(): string;
}
export declare class ConstantExpression extends Expression {
    Value: any;
    constructor(Value: any);
    Compile(): string;
}
