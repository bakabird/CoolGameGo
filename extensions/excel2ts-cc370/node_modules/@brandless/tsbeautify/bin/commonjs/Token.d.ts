import { TsBeautifyOptions } from "./TsBeautifyOptions";
import { TypeMetadata, PropertyInfo } from "@brandless/tsutility";
export declare class TsBeautifierInstance {
    static GenericTypeParameters: Array<TypeMetadata>;
    static FunctionsDeclared(): Array<string>;
    static PropertiesDeclared(): Array<PropertyInfo>;
    static ClassName: string;
    static ClassNameType: Function;
    private static WhitespaceChars;
    private static WordChars;
    private static Chars;
    private static GenericsChars;
    private _digits;
    private _digitsChars;
    private _generics;
    private _genericsBrackets;
    private _genericsBracketsChars;
    private _genericsChars;
    private _indentString;
    private _input;
    private _lineStarters;
    private _modes;
    private _options;
    private _optPreserveNewlines;
    private _output;
    private _punctuation;
    private _whitespace;
    private _whitespaceChars;
    private _wordchar;
    private _wordcharChars;
    private _currentMode;
    private _doBlockJustClosed;
    private _genericsDepth;
    private _ifLineFlag;
    private _indentLevel;
    private _isImportBlock;
    private _secondToLastChar;
    private _secondToLastCharIndex;
    private _currentInputChar;
    private _currentInputCharIndex;
    private _lastText;
    private _lastType;
    private _parserPos;
    private _token;
    private _tokenText;
    constructor(jsSourceText: string | null, options?: TsBeautifyOptions | null, interpolation?: boolean);
    private _TsBeautifierInstance_Interpolation;
    readonly Interpolation: boolean;
    protected TsBeautifierInstance_InterpolationGetter(): boolean;
    protected TsBeautifierInstance_InterpolationSetter(value: boolean): void;
    private readonly InGenerics;
    protected TsBeautifierInstance_InGenericsGetter(): boolean;
    readonly SecondToLastChar: number;
    protected TsBeautifierInstance_SecondToLastCharGetter(): number;
    readonly CurrentInputChar: number;
    protected TsBeautifierInstance_CurrentInputCharGetter(): number;
    static ToLookup(str: string | null): Map<string, boolean> | null;
    static ArrayToLookup(str: Array<string> | null): Map<string, boolean> | null;
    static ToCharLookup(lookup: Map<string, boolean> | null): Map<number, boolean> | null;
    Parse(): void;
    private PrintNewLineOrSpace;
    private TrimOutput;
    private PrintNewLine;
    private PrintSpace;
    private PrintToken;
    private Indent;
    private Unindent;
    private RemoveIndent;
    private SetMode;
    private RestoreMode;
    private IsTernaryOperation;
    private SkipWhiteSpace;
    private GetNextToken;
    private SkipWhiteSpace2;
    private SetToken;
    private At;
    Beautify(): string | null;
    toJSON(): any;
}
export declare enum StringInterpolationKind {
    None = 1,
    CSharp = 2,
    TypeScript = 3
}
export declare enum TsMode {
    Block = 0,
    Expression = 1,
    DoBlock = 2
}
export declare enum TokenType {
    Comment = 0,
    Operator = 1,
    Unknown = 2,
    EndBlock = 3,
    EndOfFile = 4,
    StartExpression = 5,
    StartBlock = 6,
    EndExpression = 7,
    Word = 8,
    StartImport = 9,
    EndImport = 10,
    SemiColon = 11,
    String = 12,
    Generics = 13,
    BlockComment = 14
}
export declare class Token {
    static GenericTypeParameters: Array<TypeMetadata>;
    static FunctionsDeclared(): Array<string>;
    static PropertiesDeclared(): Array<PropertyInfo>;
    static ClassName: string;
    static ClassNameType: Function;
    private _Token_Value;
    Value: string;
    protected Token_ValueGetter(): string;
    protected Token_ValueSetter(value: string): void;
    private _Token_TokenType;
    TokenType: TokenType;
    protected Token_TokenTypeGetter(): TokenType;
    protected Token_TokenTypeSetter(value: TokenType): void;
    private _Token_NewLineCount;
    NewLineCount: number;
    protected Token_NewLineCountGetter(): number;
    protected Token_NewLineCountSetter(value: number): void;
    constructor(token: string | null, tokenType: TokenType, newLineCount?: number);
    toJSON(): any;
}
